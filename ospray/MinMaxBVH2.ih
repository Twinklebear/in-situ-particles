/********************************************************************* *\
 * INTEL CORPORATION PROPRIETARY INFORMATION                            
 * This software is supplied under the terms of a license agreement or  
 * nondisclosure agreement with Intel Corporation and may not be copied 
 * or disclosed except in accordance with the terms of that agreement.  
 * Copyright (C) 2014 Intel Corporation. All Rights Reserved.           
 ********************************************************************* */

#pragma once

// ospray
#include "ospray/math/vec.ih"
#include "ospray/math/bbox.ih"
#include "ospray/common/Ray.ih"
#include "ospray/geometry/geometry.ih"
#include "ospray/common/Model.ih"
// embree
#include "embree2/rtcore.isph"
#include "embree2/rtcore_scene.isph"
#include "embree2/rtcore_geometry_user.isph"


/*! BVH node for a MinMaxBVH2 */
struct MinMaxBVH2Node {
  vec3f bounds_lo;
  float range_lo;
  vec3f bounds_hi; // spatial bounds
  float range_hi; // attribute range
  int64 childRef;
};

/*! the base abstraction for a min/max BVH, not yet saying whether
  it's for volumes or isosurfaces, let alone for which type of
  primitive */
struct MinMaxBVH2 {
  int64           rootRef;
  const uint32   *primID;
  MinMaxBVH2Node *node;
};

// inline bool pointInAABBTest( const uniform MinMaxBVH2Node &box, const vec3f &point)
// {
//   return 
//     point.x >= box.bounds_lo.x &
//     point.y >= box.bounds_lo.y &
//     point.z >= box.bounds_lo.z &
//     point.x <= box.bounds_hi.x &
//     point.y <= box.bounds_hi.y &
//     point.z <= box.bounds_hi.z;
// }


/*! \brief Fct pointer type for 'virtual' method that sets a pixel */
typedef bool (*MinMaxBVH_intersectPrim)(void *uniform geomPtr,
                                        uniform int primID,
                                        varying Ray &ray);

void MinMaxBVH2_intersect_packet(uniform MinMaxBVH2 *uniform bvh2,
                          void *uniform geomPtr,
                          TransferFunction *uniform,
                          uniform MinMaxBVH_intersectPrim intersectPrim,
                          uniform int numPrims,
                          varying Ray &ray);

void MinMaxBVH2_occluded_packet(uniform MinMaxBVH2 *uniform bvh2,
                         void *uniform geomPtr,
                         TransferFunction *uniform,
                         uniform MinMaxBVH_intersectPrim occludedPrim,
                         uniform int numPrims,
                         varying Ray &ray);

void MinMaxBVH2_intersect_naive(uniform MinMaxBVH2 *uniform bvh2,
                          void *uniform geomPtr,
                          TransferFunction *uniform,
                          uniform MinMaxBVH_intersectPrim intersectPrim,
                          uniform int numPrims,
                          varying Ray &ray);

void MinMaxBVH2_occluded_naive(uniform MinMaxBVH2 *uniform bvh2,
                         void *uniform geomPtr,
                         TransferFunction *uniform,
                         uniform MinMaxBVH_intersectPrim occludedPrim,
                         uniform int numPrims,
                         varying Ray &ray);



